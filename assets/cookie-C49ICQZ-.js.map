{"version":3,"file":"cookie-C49ICQZ-.js","sources":["../../node_modules/cookie/dist/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = parse;\nexports.serialize = serialize;\n/**\n * RegExp to match cookie-name in RFC 6265 sec 4.1.1\n * This refers out to the obsoleted definition of token in RFC 2616 sec 2.2\n * which has been replaced by the token definition in RFC 7230 appendix B.\n *\n * cookie-name       = token\n * token             = 1*tchar\n * tchar             = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" /\n *                     \"*\" / \"+\" / \"-\" / \".\" / \"^\" / \"_\" /\n *                     \"`\" / \"|\" / \"~\" / DIGIT / ALPHA\n *\n * Note: Allowing more characters - https://github.com/jshttp/cookie/issues/191\n * Allow same range as cookie value, except `=`, which delimits end of name.\n */\nconst cookieNameRegExp = /^[\\u0021-\\u003A\\u003C\\u003E-\\u007E]+$/;\n/**\n * RegExp to match cookie-value in RFC 6265 sec 4.1.1\n *\n * cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n * cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n *                     ; US-ASCII characters excluding CTLs,\n *                     ; whitespace DQUOTE, comma, semicolon,\n *                     ; and backslash\n *\n * Allowing more characters: https://github.com/jshttp/cookie/issues/191\n * Comma, backslash, and DQUOTE are not part of the parsing algorithm.\n */\nconst cookieValueRegExp = /^[\\u0021-\\u003A\\u003C-\\u007E]*$/;\n/**\n * RegExp to match domain-value in RFC 6265 sec 4.1.1\n *\n * domain-value      = <subdomain>\n *                     ; defined in [RFC1034], Section 3.5, as\n *                     ; enhanced by [RFC1123], Section 2.1\n * <subdomain>       = <label> | <subdomain> \".\" <label>\n * <label>           = <let-dig> [ [ <ldh-str> ] <let-dig> ]\n *                     Labels must be 63 characters or less.\n *                     'let-dig' not 'letter' in the first char, per RFC1123\n * <ldh-str>         = <let-dig-hyp> | <let-dig-hyp> <ldh-str>\n * <let-dig-hyp>     = <let-dig> | \"-\"\n * <let-dig>         = <letter> | <digit>\n * <letter>          = any one of the 52 alphabetic characters A through Z in\n *                     upper case and a through z in lower case\n * <digit>           = any one of the ten digits 0 through 9\n *\n * Keep support for leading dot: https://github.com/jshttp/cookie/issues/173\n *\n * > (Note that a leading %x2E (\".\"), if present, is ignored even though that\n * character is not permitted, but a trailing %x2E (\".\"), if present, will\n * cause the user agent to ignore the attribute.)\n */\nconst domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;\n/**\n * RegExp to match path-value in RFC 6265 sec 4.1.1\n *\n * path-value        = <any CHAR except CTLs or \";\">\n * CHAR              = %x01-7F\n *                     ; defined in RFC 5234 appendix B.1\n */\nconst pathValueRegExp = /^[\\u0020-\\u003A\\u003D-\\u007E]*$/;\nconst __toString = Object.prototype.toString;\nconst NullObject = /* @__PURE__ */ (() => {\n    const C = function () { };\n    C.prototype = Object.create(null);\n    return C;\n})();\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n */\nfunction parse(str, options) {\n    const obj = new NullObject();\n    const len = str.length;\n    // RFC 6265 sec 4.1.1, RFC 2616 2.2 defines a cookie name consists of one char minimum, plus '='.\n    if (len < 2)\n        return obj;\n    const dec = options?.decode || decode;\n    let index = 0;\n    do {\n        const eqIdx = str.indexOf(\"=\", index);\n        if (eqIdx === -1)\n            break; // No more cookie pairs.\n        const colonIdx = str.indexOf(\";\", index);\n        const endIdx = colonIdx === -1 ? len : colonIdx;\n        if (eqIdx > endIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(\";\", eqIdx - 1) + 1;\n            continue;\n        }\n        const keyStartIdx = startIndex(str, index, eqIdx);\n        const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);\n        const key = str.slice(keyStartIdx, keyEndIdx);\n        // only assign once\n        if (obj[key] === undefined) {\n            let valStartIdx = startIndex(str, eqIdx + 1, endIdx);\n            let valEndIdx = endIndex(str, endIdx, valStartIdx);\n            const value = dec(str.slice(valStartIdx, valEndIdx));\n            obj[key] = value;\n        }\n        index = endIdx + 1;\n    } while (index < len);\n    return obj;\n}\nfunction startIndex(str, index, max) {\n    do {\n        const code = str.charCodeAt(index);\n        if (code !== 0x20 /*   */ && code !== 0x09 /* \\t */)\n            return index;\n    } while (++index < max);\n    return max;\n}\nfunction endIndex(str, index, min) {\n    while (index > min) {\n        const code = str.charCodeAt(--index);\n        if (code !== 0x20 /*   */ && code !== 0x09 /* \\t */)\n            return index + 1;\n    }\n    return min;\n}\n/**\n * Serialize data into a cookie header.\n *\n * Serialize a name value pair into a cookie string suitable for\n * http headers. An optional options object specifies cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n */\nfunction serialize(name, val, options) {\n    const enc = options?.encode || encodeURIComponent;\n    if (!cookieNameRegExp.test(name)) {\n        throw new TypeError(`argument name is invalid: ${name}`);\n    }\n    const value = enc(val);\n    if (!cookieValueRegExp.test(value)) {\n        throw new TypeError(`argument val is invalid: ${val}`);\n    }\n    let str = name + \"=\" + value;\n    if (!options)\n        return str;\n    if (options.maxAge !== undefined) {\n        if (!Number.isInteger(options.maxAge)) {\n            throw new TypeError(`option maxAge is invalid: ${options.maxAge}`);\n        }\n        str += \"; Max-Age=\" + options.maxAge;\n    }\n    if (options.domain) {\n        if (!domainValueRegExp.test(options.domain)) {\n            throw new TypeError(`option domain is invalid: ${options.domain}`);\n        }\n        str += \"; Domain=\" + options.domain;\n    }\n    if (options.path) {\n        if (!pathValueRegExp.test(options.path)) {\n            throw new TypeError(`option path is invalid: ${options.path}`);\n        }\n        str += \"; Path=\" + options.path;\n    }\n    if (options.expires) {\n        if (!isDate(options.expires) ||\n            !Number.isFinite(options.expires.valueOf())) {\n            throw new TypeError(`option expires is invalid: ${options.expires}`);\n        }\n        str += \"; Expires=\" + options.expires.toUTCString();\n    }\n    if (options.httpOnly) {\n        str += \"; HttpOnly\";\n    }\n    if (options.secure) {\n        str += \"; Secure\";\n    }\n    if (options.partitioned) {\n        str += \"; Partitioned\";\n    }\n    if (options.priority) {\n        const priority = typeof options.priority === \"string\"\n            ? options.priority.toLowerCase()\n            : undefined;\n        switch (priority) {\n            case \"low\":\n                str += \"; Priority=Low\";\n                break;\n            case \"medium\":\n                str += \"; Priority=Medium\";\n                break;\n            case \"high\":\n                str += \"; Priority=High\";\n                break;\n            default:\n                throw new TypeError(`option priority is invalid: ${options.priority}`);\n        }\n    }\n    if (options.sameSite) {\n        const sameSite = typeof options.sameSite === \"string\"\n            ? options.sameSite.toLowerCase()\n            : options.sameSite;\n        switch (sameSite) {\n            case true:\n            case \"strict\":\n                str += \"; SameSite=Strict\";\n                break;\n            case \"lax\":\n                str += \"; SameSite=Lax\";\n                break;\n            case \"none\":\n                str += \"; SameSite=None\";\n                break;\n            default:\n                throw new TypeError(`option sameSite is invalid: ${options.sameSite}`);\n        }\n    }\n    return str;\n}\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n */\nfunction decode(str) {\n    if (str.indexOf(\"%\") === -1)\n        return str;\n    try {\n        return decodeURIComponent(str);\n    }\n    catch (e) {\n        return str;\n    }\n}\n/**\n * Determine if value is a Date.\n */\nfunction isDate(val) {\n    return __toString.call(val) === \"[object Date]\";\n}\n//# sourceMappingURL=index.js.map"],"names":["Object","defineProperty","dist","value","parse","str","options","obj","NullObject","len","length","dec","decode","index","eqIdx","indexOf","colonIdx","endIdx","lastIndexOf","keyStartIdx","startIndex","keyEndIdx","endIndex","key","slice","valStartIdx","valEndIdx","serialize","name","val","enc","encode","encodeURIComponent","cookieNameRegExp","test","TypeError","cookieValueRegExp","maxAge","Number","isInteger","domain","domainValueRegExp","path","pathValueRegExp","expires","__toString","call","isDate","isFinite","valueOf","toUTCString","httpOnly","secure","partitioned","priority","toLowerCase","sameSite","prototype","toString","C","create","max","code","charCodeAt","min","decodeURIComponent","e"],"mappings":"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","x_google_ignoreList":[0]}